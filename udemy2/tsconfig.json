{
  "compilerOptions": {
    /* Basic Options */
    // "incremental": true,                   /* Enable incremental compilation */
    "target": "ES6" /*  指定した場合はコンパイルされた後のJSのコードが変わる、es5→es6に変換する。TS側でのバージョン */,
    "module": "commonjs" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,
    // "lib": [
    //   "ES6",
    //   "DOM",
    //   "DOM.Iterable",
    //   "ScriptHost"
    // ] /* JSのデフォルト関数の型定義を指定するファイルのパスを指定している、ない場合はtargetのバージョンをみにいき自動指定する */,
    // "allowJs": true,                       /* Allow javascript files to be compiled. */
    // "checkJs": true,                       /* jsエラー回避  */
    // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    // "declaration": true,                   /* 型定義ファイルを作成することができる '.d.ts' file.コンパイルした後のJSの型定義ファイルができる。 */
    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file.　 */
    // "sourceMap": true /* ブラウザでTSを見るようにできるようにmapファイルを作成する。 */,
    // "outFile": "./",                       /* Concatenate and emit output to single file. */
    "outDir": "./dist" /* TS-JSを変換する時のJSの置き場所を決める 全ての、TSファイルを一番効率よく入るように設定される*/,
    "noEmitOnError": true /* エラーが発生したら、Emmitつまりコンパイルしない。*/,
    // "rootDir": "./src" /* 出力したファイルの階層構造を決める. */,
    // "composite": true,                     /* Enable project compilation */
    // "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */
    // "removeComments": true,                /* TSのコメントアウトをおさらばする*/
    // "noEmit": true,                        /* TSの型チェックのみを行う　何も出力しない。 */
    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
    // "downlevelIteration": true,            /* when targeting 'ES5' or 'ES3' for-ofを使用した時にエラーが出る可能性がある。 */
    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Strict Type-Checking Options */
    "strict": true /* 下の6つが全部trueになる。コードのチェック機能をどこまできつくするのか */,
    // "noImplicitAny": true,                 /* 暗黙的なanyでエラーが発生する。変数の場合は例外になる。明示的なanyはOK */
    // "strictNullChecks": true /*  */,
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    // "strictBindCallApply": true /* Enable strict 'bind', 'call', and 'apply' methods on functions. */,
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */
    "noUnusedLocals": true /* Report errors on unused locals. */,
    "noUnusedParameters": true /* Report errors on unused parameters. */,
    // "noImplicitReturns": true /* returnを. */,
    // "noFallthroughCasesInSwitch": true /* Report errors for fallthrough cases in switch statement. */,

    /* Module Resolution Options */
    // "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */
    // "types": [],                           /* Type declaration files to be included in compilation. */
    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */
    // "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */

    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options 　将来追加されつJSの機能*/
    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */

    /* Advanced Options */
    "forceConsistentCasingInFileNames": true /* Disallow inconsistently-cased references to the same file. */
  }
  // // includeしたものからexcludewを引くという作業
  // "include": ["index.ts"],
  // // ルートディレクトリの特定ファイルを除外できる
  // "exclude": [
  //   "tmp/complile.ts",
  //   // 全フォルダ対象
  //   "**/complile.ts",
  //   //ワイルドカードも使用できる。
  //   "*.spec.ts",
  //   "node_modules"
  // ],
  // // 絶対パスか相対パスしか使用できない。
  // // excludeにしていしていても追加すること
  // "files": ["index.ts"]
}
